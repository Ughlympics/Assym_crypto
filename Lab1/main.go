package main

import (
	"Lab1/gens"
)

func main() {
	result := gens.LowLehmer(1, 125000)
	//fmt.Println("Result:", result)
	gens.Prob_test(result, 0.05)
	gens.Ind_test(result, 0.05)

	//seq20 := gens.L20(12345, 30)
	//fmt.Println("L20:", seq20)

	//seq89 := gens.L89(6789346536456, 80)
	//fmt.Println("L89:", seq89)

	// seedL11 := []bool{true, false, true, false, true, false, true, false, true, false, true}
	// seedL9 := []bool{true, true, false, true, false, true, false, false, true}
	// seedL10 := []bool{true, false, false, true, true, false, true, false, false, true}

	// checkBits := 200
	// x := gens.GenerateL11(seedL11, checkBits)
	// y := gens.GenerateL9(seedL9, checkBits)
	// s := gens.GenerateL10(seedL10, checkBits)

	// zBits := make([]bool, checkBits)
	// for i := 0; i < checkBits; i++ {
	// 	zBits[i] = gens.F(x[i], y[i], s[i])
	// }

	// zBytes := gens.BitsToBytes(zBits)

	// fmt.Println("generated bytes (Giffi gamma):")
	// fmt.Println(zBytes)

	// var seed uint32 = 0xDEADBEEF
	// bits1 := gens.WolframGenerator(seed, 64)
	// bytes1 := gens.BitsToBytes(bits1)
	// fmt.Printf("Wolfram: % x\n", bytes1)

	// bytes, err := gens.LibrarianGenerator("Noviy_zavet_f.txt", 125000)
	// if err != nil {
	// 	fmt.Println("Error:", err)
	// 	return
	// }

	// fmt.Println("Generated bytes:")
	// fmt.Println(bytes)

	// seq, err := gens.BMGenerator(125000)
	// if err != nil {
	// 	fmt.Println("Error:", err)
	// 	return
	// }

	// fmt.Printf("BM bytes: %x\n", seq)

	// //
	// seq2, err2 := gens.BBSGenerator(32)
	// if err != nil {
	// 	fmt.Println("Error:", err2)
	// 	return
	// }

	// fmt.Printf("BBS bytes: %x\n", seq2)
}
